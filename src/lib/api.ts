// @/lib/api.ts
export interface LogDetails {
    [key: string]: unknown; // –î–µ—Ç–∞–ª–∏ –ª–æ–≥–∞ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ª—é–±—ã–µ –∫–ª—é—á–∏
}

export interface LogData {
    id: number;
    action: string; // LogAction
    entity: string; // LogEntity
    entityId: number;
    userId: number;
    username: string; // ‚Üê –≠—Ç–æ –ø–æ–ª–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å
    timestamp: string;
    details?: LogDetails; // ‚Üê –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: any ‚Üí LogDetails
}

export interface ApiLogResponse {
    logs: LogData[];
    total: number;
}

export const logApi = {
    getRecentLogs: async (limit: number = 25): Promise<ApiLogResponse> => {
        try {
            console.log('üåê API Request to: /api/logs?limit=' + limit);
            const response = await fetch(`/api/logs?limit=${limit}`);

            console.log('üì° API Response status:', response.status);

            if (!response.ok) {
                const errorText = await response.text();
                console.error('‚ùå API Error response:', errorText);
                throw new Error(`HTTP ${response.status}: ${errorText}`);
            }

            const data = await response.json();
            console.log('‚úÖ API Success response:', data);
            console.log('üìã Logs with usernames:', data.logs.map(l => ({id: l.id, username: l.username})));

            return data;
        } catch (error) {
            console.error('üí• Network error:', error);
            throw error;
        }
    }
};